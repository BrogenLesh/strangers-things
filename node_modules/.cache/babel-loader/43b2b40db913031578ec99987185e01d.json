{"ast":null,"code":"// import { React, useEffect, useState } from \"react\";\n// import { Link, useHistory } from \"react-router-dom\";\n// import { fetchAllPost } from \"../utility/api\";\n// const Posts = (props) => {\n//     const {\n//         posts, setPosts,\n//         postID, setPostID, token,\n//         featuredPost, setFeaturedPost, search, setSearch } = props\n//     const history = useHistory();\n//     const post = async () => {\n//         setPosts(await fetchAllPost(token))\n//     }\n//     useEffect(() => {\n//         post();\n//     }, []);\n//     const handleSearch = (event) => {\n//         setSearch(event.target.value)\n//     }\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n//     }\n//     const handleClick = () => {\n//         token ? history.push('/createform') :\n//             alert(\"Please Login\")\n//     }\n//     const handleFeaturedPost = (event, post) => {\n//         // grab that post and display on screen\n//         if (token) {\n//             setFeaturedPost(post);\n//             setPostID(post._id)\n//             history.push(`/posts/${post._id}`)\n//         } else {\n//             alert(\"please Login\")\n//         }\n//         // change the URL path to ${APIURL}/post/postID\n//     }\n//     return (\n//         <div>\n//             <form id=\"postNav\" onSubmit={handleSubmit}>\n//                 <input type=\"text\" name=\"search\" placeholder=\"Search Post\" value={search} onChange={handleSearch}></input>\n//                 <button style={{ fontSize: \"15px\" }} onClick={handleClick}>Create a Post +</button>\n//             </form>\n//             {\n//                 posts.filter(post => {\n//                     return `${post.title} ${post.description}`\n//                         //After creating a post, I can't see my Posts because of a TypeError \"Cannot read properties of undefined (reading \"title\") Post.js line 49:1\n//                         .toLowerCase()\n//                         .includes(search.toLowerCase())\n//                 }).map((post) => {\n//                     return (\n//                         <>\n//                             <div id=\"post-card\" onClick={(event) => {\n//                                 { handleFeaturedPost(event, post) }\n//                             }}>\n//                                 <h1 className=\"card-hover\">{post.title}</h1>\n//                                 <p>{post.description}</p>\n//                                 <div>\n//                                     <b>Price:</b> {post.price}\n//                                 </div>\n//                                 <div>\n//                                     <b>Seller:</b> {post.author.username}\n//                                 </div>\n//                                 <div>\n//                                     <b>Location:</b> {post.location}\n//                                 </div>\n//                             </div>\n//                         </>\n//                     );\n//                 })}\n//         </div>\n//     );\n// };\n// export default Posts;\nconst cohortName = \"2204-FTB-MT-WEB-PT\";\nconst APIURL = `https://strangers-things.herokuapp.com/api/${cohortName}`;\nexport const fetchAllPost = async token => {\n  const response = await fetch(`${APIURL}/posts`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  const result = await response.json();\n  return result.data.posts;\n};\nexport const fetchCreateForm = async (token, title, description, price, location) => {\n  const response = await fetch(`${APIURL}/posts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      post: {\n        title: title,\n        description: description,\n        price: price,\n        location: location\n      }\n    })\n  });\n  const result = await response.json();\n  console.log(result.data.post);\n  return result.data.post;\n};\nexport const fetchRegister = async (userName, password) => {\n  const response = await fetch(`${APIURL}/users/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user: {\n        username: userName,\n        password: password\n      }\n    })\n  });\n  const result = await response.json();\n  console.log(result);\n\n  if (!result.success) {\n    alert(result.error.message);\n  } else {\n    return result.data.token;\n  }\n};\nexport const fetchLogin = async (userName, password) => {\n  const response = await fetch(`${APIURL}/users/login`, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user: {\n        username: userName,\n        password: password\n      }\n    })\n  });\n  const result = await response.json();\n\n  if (!result.success) {\n    alert(result.error.message);\n  } else {\n    return result.data.token;\n  }\n};\nexport const fetchDelete = async (token, postID, selectedPost, posts, setPosts) => {\n  const response = await fetch(`${APIURL}/posts/${postID}`, {\n    method: \"DELETE\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  const result = await response.json();\n  console.log(result);\n\n  if (result.success) {\n    window.confirm('Are you sure you want to DELETE this post?'); //BUG: still deletes when pressing NO\n\n    const newPost = posts.filter(post => post._id !== selectedPost);\n    console.log(newPost);\n    setPosts(newPost);\n  } else {\n    alert(\"UNAUTHORIZED TO DELETE\");\n  }\n};\nexport const fetchMessage = async (postID, token, comment) => {\n  const response = await fetch(`${APIURL}/posts/${postID}/messages`, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      message: {\n        content: comment\n      }\n    })\n  });\n  const result = await response.json();\n  console.log(result);\n  return result.data.message.content;\n};\nexport const fetchUserData = async token => {\n  const response = await fetch(`${APIURL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  const result = await response.json();\n  console.log(result.data);\n  return result.data.messages;\n};","map":{"version":3,"names":["cohortName","APIURL","fetchAllPost","token","response","fetch","method","headers","result","json","data","posts","fetchCreateForm","title","description","price","location","body","JSON","stringify","post","console","log","fetchRegister","userName","password","user","username","success","alert","error","message","fetchLogin","fetchDelete","postID","selectedPost","setPosts","window","confirm","newPost","filter","_id","fetchMessage","comment","content","fetchUserData","messages"],"sources":["/home/leshb/Course Work/strangers-things/src/util/api.js"],"sourcesContent":["// import { React, useEffect, useState } from \"react\";\n// import { Link, useHistory } from \"react-router-dom\";\n// import { fetchAllPost } from \"../utility/api\";\n\n// const Posts = (props) => {\n//     const {\n//         posts, setPosts,\n//         postID, setPostID, token,\n//         featuredPost, setFeaturedPost, search, setSearch } = props\n\n//     const history = useHistory();\n\n//     const post = async () => {\n//         setPosts(await fetchAllPost(token))\n//     }\n\n//     useEffect(() => {\n//         post();\n//     }, []);\n\n\n//     const handleSearch = (event) => {\n//         setSearch(event.target.value)\n//     }\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n//     }\n\n//     const handleClick = () => {\n//         token ? history.push('/createform') :\n//             alert(\"Please Login\")\n//     }\n\n//     const handleFeaturedPost = (event, post) => {\n//         // grab that post and display on screen\n//         if (token) {\n//             setFeaturedPost(post);\n//             setPostID(post._id)\n//             history.push(`/posts/${post._id}`)\n//         } else {\n//             alert(\"please Login\")\n//         }\n\n//         // change the URL path to ${APIURL}/post/postID\n//     }\n\n//     return (\n//         <div>\n//             <form id=\"postNav\" onSubmit={handleSubmit}>\n//                 <input type=\"text\" name=\"search\" placeholder=\"Search Post\" value={search} onChange={handleSearch}></input>\n//                 <button style={{ fontSize: \"15px\" }} onClick={handleClick}>Create a Post +</button>\n//             </form>\n\n//             {\n//                 posts.filter(post => {\n\n//                     return `${post.title} ${post.description}`\n//                         //After creating a post, I can't see my Posts because of a TypeError \"Cannot read properties of undefined (reading \"title\") Post.js line 49:1\n//                         .toLowerCase()\n//                         .includes(search.toLowerCase())\n//                 }).map((post) => {\n//                     return (\n//                         <>\n//                             <div id=\"post-card\" onClick={(event) => {\n//                                 { handleFeaturedPost(event, post) }\n//                             }}>\n//                                 <h1 className=\"card-hover\">{post.title}</h1>\n//                                 <p>{post.description}</p>\n//                                 <div>\n//                                     <b>Price:</b> {post.price}\n//                                 </div>\n//                                 <div>\n//                                     <b>Seller:</b> {post.author.username}\n//                                 </div>\n//                                 <div>\n//                                     <b>Location:</b> {post.location}\n//                                 </div>\n//                             </div>\n//                         </>\n//                     );\n//                 })}\n//         </div>\n//     );\n// };\n\n// export default Posts;\n\n\n\nconst cohortName = \"2204-FTB-MT-WEB-PT\";\nconst APIURL = `https://strangers-things.herokuapp.com/api/${cohortName}`;\n\nexport const fetchAllPost = async (token) => {\n    const response = await fetch(`${APIURL}/posts`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        }\n    })\n    const result = await response.json();\n    return (result.data.posts)\n};\n\n\nexport const fetchCreateForm = async (token, title, description, price, location) => {\n    const response = await fetch(`${APIURL}/posts`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n            post: {\n                title: title,\n                description: description,\n                price: price,\n                location: location\n            }\n        })\n    })\n    const result = await response.json();\n    console.log(result.data.post)\n    return result.data.post\n\n}\n\nexport const fetchRegister = async (userName, password) => {\n    const response = await fetch(`${APIURL}/users/register`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            user: {\n                username: userName,\n                password: password\n            }\n        })\n\n    })\n    const result = await response.json();\n    console.log(result)\n    if (!result.success) {\n        alert(result.error.message)\n    } else {\n        return (result.data.token)\n    }\n\n}\n\n\nexport const fetchLogin = async (userName, password) => {\n    const response = await fetch(`${APIURL}/users/login`, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            user: {\n                username: userName,\n                password: password\n            }\n        })\n    })\n\n    const result = await response.json()\n    if (!result.success) {\n        alert(result.error.message)\n    } else {\n        return result.data.token\n    }\n\n}\n\nexport const fetchDelete = async (token, postID, selectedPost, posts, setPosts) => {\n    const response = await fetch(`${APIURL}/posts/${postID}`, {\n        method: \"DELETE\",\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        }\n    })\n    const result = await response.json()\n    console.log(result)\n    if (result.success) {\n        window.confirm('Are you sure you want to DELETE this post?') //BUG: still deletes when pressing NO\n        const newPost = posts.filter(post => post._id !== selectedPost)\n        console.log(newPost)\n        setPosts(newPost)\n    } else {\n        alert(\"UNAUTHORIZED TO DELETE\")\n    }\n\n}\n\nexport const fetchMessage = async (postID, token, comment) => {\n    const response = await fetch(`${APIURL}/posts/${postID}/messages`, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n            message: {\n                content: comment\n            }\n        })\n    })\n\n    const result = await response.json();\n    console.log(result)\n    return result.data.message.content\n\n}\n\n\nexport const fetchUserData = async (token) => {\n    const response = await fetch(`${APIURL}/users/me`, {\n        method: \"GET\",\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        }\n    })\n    const result = await response.json();\n    console.log(result.data)\n    return result.data.messages\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}